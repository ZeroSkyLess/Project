#pragma once

namespace sky {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace MySql::Data::MySqlClient;

	/// <summary>
	/// Summary for statistic
	/// </summary>
	public ref class statistic : public System::Windows::Forms::Form
	{
	public:
		statistic(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~statistic()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::DataVisualization::Charting::Chart^  chart1;
	private: System::Windows::Forms::Button^  button1;
	private: System::Windows::Forms::LinkLabel^  linkLabel1;
	private: System::Windows::Forms::TextBox^  textBox1;
	private: System::Windows::Forms::TextBox^  textBox2;
	protected:

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			System::Windows::Forms::DataVisualization::Charting::ChartArea^  chartArea1 = (gcnew System::Windows::Forms::DataVisualization::Charting::ChartArea());
			System::Windows::Forms::DataVisualization::Charting::Legend^  legend1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Legend());
			System::Windows::Forms::DataVisualization::Charting::Series^  series1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^  series2 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			this->chart1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Chart());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->linkLabel1 = (gcnew System::Windows::Forms::LinkLabel());
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->textBox2 = (gcnew System::Windows::Forms::TextBox());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->chart1))->BeginInit();
			this->SuspendLayout();
			// 
			// chart1
			// 
			chartArea1->Name = L"ChartArea1";
			this->chart1->ChartAreas->Add(chartArea1);
			legend1->Name = L"Legend1";
			this->chart1->Legends->Add(legend1);
			this->chart1->Location = System::Drawing::Point(118, 32);
			this->chart1->Name = L"chart1";
			series1->ChartArea = L"ChartArea1";
			series1->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series1->Legend = L"Legend1";
			series1->Name = L"Road Tax (RM)";
			series2->ChartArea = L"ChartArea1";
			series2->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series2->Legend = L"Legend1";
			series2->Name = L"Summon (RM)";
			this->chart1->Series->Add(series1);
			this->chart1->Series->Add(series2);
			this->chart1->Size = System::Drawing::Size(301, 209);
			this->chart1->TabIndex = 0;
			this->chart1->Text = L"chart1";
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(12, 55);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(75, 23);
			this->button1->TabIndex = 1;
			this->button1->Text = L"Show ";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &statistic::button1_Click);
			// 
			// linkLabel1
			// 
			this->linkLabel1->AutoSize = true;
			this->linkLabel1->Location = System::Drawing::Point(12, 15);
			this->linkLabel1->Name = L"linkLabel1";
			this->linkLabel1->Size = System::Drawing::Size(40, 13);
			this->linkLabel1->TabIndex = 2;
			this->linkLabel1->TabStop = true;
			this->linkLabel1->Text = L"< back";
			this->linkLabel1->LinkClicked += gcnew System::Windows::Forms::LinkLabelLinkClickedEventHandler(this, &statistic::linkLabel1_LinkClicked);
			// 
			// textBox1
			// 
			this->textBox1->Location = System::Drawing::Point(12, 95);
			this->textBox1->Name = L"textBox1";
			this->textBox1->Size = System::Drawing::Size(100, 20);
			this->textBox1->TabIndex = 3;
			// 
			// textBox2
			// 
			this->textBox2->Location = System::Drawing::Point(15, 145);
			this->textBox2->Name = L"textBox2";
			this->textBox2->Size = System::Drawing::Size(100, 20);
			this->textBox2->TabIndex = 4;
			// 
			// statistic
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(440, 328);
			this->Controls->Add(this->textBox2);
			this->Controls->Add(this->textBox1);
			this->Controls->Add(this->linkLabel1);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->chart1);
			this->Name = L"statistic";
			this->Text = L"statistic";
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->chart1))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion

	private: System::Void linkLabel1_LinkClicked(System::Object^  sender, System::Windows::Forms::LinkLabelLinkClickedEventArgs^  e) {
		this->Hide();
	}

	private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) {



		/*String a;
		

		textBox2->Text = a.ToString();
		*/

		String^ constring = L"datasource=localhost;port=3306;username=root;password=1234";

		// statistic of road tax
		MySqlConnection^ conDatabase = gcnew MySqlConnection(constring);
		MySqlCommand^ cmdDatabase = gcnew MySqlCommand("select sum(roadtax) as total,month(date) as mon from workshop.income where roadtax != 'null' group by month(date);", conDatabase);

		MySqlDataReader^ read;


		try
		{
			conDatabase->Open();
			read = cmdDatabase->ExecuteReader();

			String^ a;

			while (read->Read())
			{
				a = read->GetString("mon");

				if (a == "1")
				{
					a = "January";
				}

				if (a == "2")
				{
					a = "February";
				}

				if (a == "3")
				{
					a = "March";
				}

				if (a == "4")
				{
					a = "April";
				}

				if (a == "5")
				{
					a = "May";
				}

				if (a == "6")
				{
					a = "June";
				}

				if (a == "7")
				{
					a = "July";
				}

				if (a == "8")
				{
					a = "August";
				}

				if (a == "9")
				{
					a = "September";
				}

				if (a == "10")
				{
					a = "October";
				}

				if (a == "11")
				{
					a = "November";
				}

				if (a == "12")
				{
					a = "December";
				}

				this->chart1->Series["Road Tax (RM)"]->Points->AddXY(a, read->GetInt32("total"));
			}

			read->Close();
		}
		catch (Exception^ex)
		{
			MessageBox::Show(ex->Message);
		}

		//statistic of summon
		MySqlConnection^ conDatabase2 = gcnew MySqlConnection(constring);
		MySqlCommand^ cmdDatabase2 = gcnew MySqlCommand("select sum(saman) as total,month(date) as mon from workshop.income where saman != 'null' group by month(date);", conDatabase2);

		MySqlDataReader^ read2;


		try
		{
			conDatabase2->Open();
			read2 = cmdDatabase2->ExecuteReader();

			String^ a;

			while (read2->Read())
			{
				a = read2->GetString("mon");

				if (a == "1")
				{
					a = "January";
				}

				if (a == "2")
				{
					a = "February";
				}

				if (a == "3")
				{
					a = "March";
				}

				if (a == "4")
				{
					a = "April";
				}

				if (a == "5")
				{
					a = "May";
				}

				if (a == "6")
				{
					a = "June";
				}

				if (a == "7")
				{
					a = "July";
				}

				if (a == "8")
				{
					a = "August";
				}

				if (a == "9")
				{
					a = "September";
				}

				if (a == "10")
				{
					a = "October";
				}

				if (a == "11")
				{
					a = "November";
				}

				if (a == "12")
				{
					a = "December";
				}

				this->chart1->Series["Summon(RM)"]->Points->AddXY(a, read2->GetInt32("total"));
			}

			read2->Close();
		}
		catch (Exception^ex)
		{
			MessageBox::Show(ex->Message);
		}

	}

	};
}
